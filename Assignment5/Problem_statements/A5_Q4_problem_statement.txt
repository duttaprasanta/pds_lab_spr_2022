An image is generally represented as a 2D matrix, where the matrix elements represent the pixel intensity values. A typical approach to change the appearance of the image (e.g. sharpen, blur, etc) is done by a method called "filtering". In this approach, a small matrix first constructed, which is also called "kernel". The kernel order is always an odd number, and usually of the order of 1x1, 3x3, 5x5, 7x7, etc. This kernel is then slid over the original image matrix pixel by pixel over the entire image, and multiply the corresponding elements and then add them up to get a new value. This process is repeated until all pixels are traversed.

For example, consider the following image matrix:
7   23   50   64   14
15  13   31   46   8
42  25   92   31   32
71  44   74   94   92
2   43   51   35   4
and the following kernel:
0  2  0
0  0  0
0  0  0

Now if we slide the kernel over the image, in the first step the following matrix elements will be coincident with the kernel:
7   23   50
15  13   31
42  25   92
Now the resultant value is computed as: (7x0 + 23x2 + 50x0 + 15x0 + 13x0 + 31x0 + 42x0 + 25x0 + 92x0) = 46
After sliding over all the elements, we will obtain the following matrix:
-    -    -     -    -
-   46   100   128   -
-   26    62    92   -
-   50   184    62   -
-    -    -     -    -

Notice that the resultant image has lost the borders due to the kernel operation (lost elements are shown as '-').

Your task is to take an image matrix and a kernel matrix from the user input, dynamically allocate all the matrices, perform the filtering operation, and output the resultant matrix.
Write suitable functions. Comment your code.

Ex:
Enter the dimension of the input image matrix: 4  5
Enter the input image matrix:
3   14   5   1   22
5   9   17  33   8
11  1    4  67   46
6   33   2  51   12

Enter the kernel size: 3
Enter the kernel elements:
1  2  1
2  4  2
1  2  1


Output image matrix is:
133   253   395
148   316   575